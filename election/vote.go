package election

import (
	"math/big"

	"github.com/consensys/gnark-crypto/ecc/bls12-377/ecdsa"
	paillier "github.com/roasbeef/go-go-gadget-paillier"
	"github.com/shynfard/BitVote/wallet"
)

type NIZKProof struct {
	c, z *big.Int
}

type Vote struct {
	poll *Poll

	vote          []byte
	encryptedVote [][]byte

	wallet     *wallet.Wallet
	privateKey *ecdsa.PrivateKey

	keyImage []byte

	authProof  *NIZKProof
	authzProof *NIZKProof

	signature []byte

	rand *big.Int
}

// - set poll ID
// - set vote
// - encrypt vote with public key of poll creator
// - create a one-time key pair
// - create proof of authenticity (that one-time key pair is generated by master keys)
// - create proof of authorization (that master public key is in participants list)
// - calculate key image
// - sign vote with private spend key
func (v *Vote) CreateVote(wallet wallet.Wallet, pollData []byte, vote []byte) {
	v.wallet = &wallet
	poll, err := LoadPoll(pollData)
	if err != nil {
		panic(err)
	}
	v.poll = poll
	v.vote = vote
	v.rand = randomBigInt(v.poll.homomorphicPublicKey.N)

	v.calculateEncryptedVote()

	v.privateKey = wallet.GenerateOneTimePair(v.rand.Bytes())

	v.calculateAuthProof()

	v.calculateAuthzProof()

	v.calculateKeyImage()

}

func (v *Vote) calculateEncryptedVote() {
	for _, dataVote := range v.vote {
		enc, err := paillier.EncryptWithNonce(v.poll.homomorphicPublicKey, v.rand, []byte{dataVote})
		if err != nil {
			panic(err)
		}
		v.encryptedVote = append(v.encryptedVote, enc.Bytes())
	}
}

func (v *Vote) calculateAuthProof() {

}

func (v *Vote) calculateAuthzProof() {
}

func (v *Vote) calculateKeyImage() {
	// // keyImage = H(publicKey, privateKey)
	// h := sha256.New()
	// h.Write(v.publicKey.Bytes())
	// h.Write(v.privateKey.Bytes())
	// v.keyImage = h.Sum(nil)
}

func (v *Vote) GetHash() []byte {
	// h := sha256.New()
	// h.Write(v.poll.pollID)
	// h.Write(v.vote)
	// h.Write(v.encryptedVote)
	// h.Write(v.publicKey.Bytes())
	// h.Write(v.privateKey.Bytes())
	// h.Write(v.keyImage)
	// h.Write(v.authProof.c.Bytes())
	// h.Write(v.authProof.z.Bytes())
	// h.Write(v.authzProof.c.Bytes())
	// h.Write(v.authzProof.z.Bytes())
	// return h.Sum(nil)
	return nil
}

func (v *Vote) GetVote() []byte {
	return v.vote
}

func LoadVote(data []byte) *Vote {
	// vote := new(Vote)
	// vote.poll = new(Poll)
	// vote.poll.LoadPoll(data)
	// return vote
	return nil
}
