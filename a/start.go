package main

import (
	"fmt"

	"github.com/shynfard/BitVote/election"
	"github.com/shynfard/BitVote/wallet"
)

// user authentication
// - if private key is not provided, generate a new one
func authenticate(keys []byte) {
	// create instnce of user
	wallet := wallet.Wallet{}

	if keys == nil {
		wallet.Generate()
	} else {
		// load user wallet
		wallet.Load(keys)
	}

}

// poll creation
// - set question
// - set options
// - set duration
// - set list of participants
// - calculate Poll ID
// // - calculate fee
func createPoll(creator wallet.Wallet, question string, options []string, duration int, participants [][]byte) {
	// create poll
	poll := election.Poll{}
	// Convert options to [][]byte
	var optionsBytes [][]byte
	for _, option := range options {
		optionsBytes = append(optionsBytes, []byte(option))
	}

	poll.CreatePoll(creator.GetPublicKey(), creator.GetPrivateKey(), []byte(question), optionsBytes, duration, participants)

	fmt.Println(poll.GetPoll())
}

// poll voting
// - load poll
// - encrypt vote with public key of poll creator
// - create a one-time key pair
// - create proof of authenticity (that one-time key pair is generated by master keys)
// - create proof of authorization (that master public key is in participants list)
// - calculate key image
// - sign vote with private spend key
func vote(pollID string, vote string, creator wallet.Wallet) {
	// create vote
	// vote := poll.Vote{}
	// vote.CreateVote(pollID, vote, creator.GetPublicKey())
}
